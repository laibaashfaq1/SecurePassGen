import streamlit as st  # Streamlit is used to create the web app
import random  # Random is used to generate random characters
import string  # String is used to define the characters that can be used in the password

# Function to generate a password
def generate_password(Length, use_digits, use_special):
    characters = string.ascii_letters  # Includes all letters (a-z, A-Z)

    #if use_digits is true, then add numbers to the characters string
    if use_digits:
        characters += string.digits  # Adds numbers (0-9) if selected

    #if use_special is true, then add special characters to the characters string
    if use_special:
        characters += "!@#$%^&*()-_+=<>?/{}[]"  # Manually defined special characters

    #return the password    
    return ''.join(random.choice(characters) for _ in range(Length))

# Function to check password strength
def check_password_strength(password):
    score = 0
    suggestions = []

    # Check length
    if len(password) >= 12:  # Increased minimum length requirement
        score += 1
    else:
        suggestions.append("Increase password length (at least 12 characters).")

    # Check uppercase & lowercase
    if any(char.islower() for char in password) and any(char.isupper() for char in password):
        score += 1
        #if the password has both uppercase and lowercase letters, then add a suggestion
    else:
        suggestions.append("Use a mix of uppercase and lowercase letters.")

    # Check digits
    if sum(c.isdigit() for c in password) >= 2:  # Require at least 2 numbers
        score += 1
    else:
        suggestions.append("Include at least two numbers (0-9).")

    # Check special characters
    special_characters = "!@#$%^&*()-_+=<>?/{}[]"
    if sum(c in special_characters for c in password) >= 2:  # Require at least 2 special characters
        score += 1
    else:
        suggestions.append("Add at least two special characters (!@#$%^&*).")

    # Determine password strength based on score
    if score <= 2:
        return "Weak", suggestions
    elif score == 3:
        return "Moderate", suggestions
    else:
        return "Strong", []

# Title of the app
st.title("ğŸ”‘ SecurePassGen")

# Description of the app
st.write("Welcome to SecurePassGen! This tool helps you generate secure passwords for your accounts. "
         "You can either generate a random password or enter your own password to check its strength. "
         "Let's get started!")

# Checkbox for choosing password method

#if the user wants to generate a password, then show the generate password option           
generate_option = st.checkbox("Generate a Password")

#if the user wants to enter their own password, then show the enter your own password option
custom_option = st.checkbox("Enter Your Own Password")

#if the user wants to generate a password and enter their own password, then show a warning message
if generate_option and custom_option:
    st.warning("Please select only one option at a time.")

#if the user wants to generate a password, then show the generate password option
elif generate_option:
    # Input for password length
    length = st.slider("Select the length of the password", min_value=8, max_value=32, value=12)

    # Checkboxes for password criteria
    use_digits = st.checkbox("Include Digits")
    use_special = st.checkbox("Include Special Characters")

    # Button to generate password
    if st.button("Generate Password"):
        password = generate_password(length, use_digits, use_special)
        st.success(f"Generated Password: `{password}`")

elif custom_option:
    user_password = st.text_input("Enter your own password", type="password")
    
    if user_password:
        strength, feedback = check_password_strength(user_password)
        
        if strength == "Weak":
            st.error("âš  Your password is **Weak**. Try these improvements:")
            for tip in feedback:
                st.write(f"ğŸ”¹ {tip}")
        elif strength == "Moderate":
            st.warning("âš  Your password is **Moderate**. You can make it stronger by:")
            for tip in feedback:
                st.write(f"ğŸ”¹ {tip}")
        else:
            st.success("âœ… Your password is **Strong**. Great job!")

# Footer
st.write("---")
st.write("ğŸ”’ Securely generated by **SecurePassGen** | Made by [Laiba Ashfaq](https://github.com/laibaashfaq1)")
